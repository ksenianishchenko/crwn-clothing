{"ast":null,"code":"import _objectSpread from \"D:\\\\Projects\\\\udemy-react-projects\\\\Crwn-clothing\\\\crwn-clothing\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport { takeLatest, put, all, call } from 'redux-saga/effects';\nimport userTypes from './user.types';\nimport { googleProvider, auth, createUserProfileDocument, getCurrentUser } from '../../firebase/firebase.utils';\nimport { signInFailure, signInSuccess, signOutFailure } from './user.actions';\nexport function* getAuthUserSnapshot(user) {\n  try {\n    const userRef = yield call(createUserProfileDocument, user);\n    const snapshot = yield userRef.get();\n    yield put(signInSuccess(_objectSpread({\n      id: snapshot.id\n    }, snapshot.data())));\n  } catch (error) {\n    yield put(signInFailure(error.message));\n  }\n}\nexport function* onGoogleSignIn() {\n  try {\n    const _ref = yield auth.signInWithPopup(googleProvider),\n          user = _ref.user;\n\n    yield getAuthUserSnapshot(user);\n  } catch (error) {\n    yield put(signInFailure(error.message));\n  }\n}\nexport function* onEmailSignIn({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const _ref2 = yield auth.signInWithEmailAndPassword(email, password),\n          user = _ref2.user;\n\n    yield getAuthUserSnapshot(user);\n  } catch (error) {\n    yield put(signInFailure(error.message));\n  }\n}\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    yield getAuthUserSnapshot(userAuth);\n  } catch (error) {\n    yield put(signInFailure(error.message));\n  }\n}\nexport function* onUserSignOut() {\n  try {} catch (error) {\n    yield put(signOutFailure(error.message));\n  }\n}\nexport function* googleSignInStart() {\n  yield takeLatest(userTypes.GOOGLE_SIGN_IN_START, onGoogleSignIn);\n}\nexport function* emailSignInStart() {\n  yield takeLatest(userTypes.EMAIL_SIGN_IN_START, onEmailSignIn);\n}\nexport function* checkUserSession() {\n  yield takeLatest(userTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\nexport function* signOutUserStart() {\n  yield takeLatest(userTypes.SIGN_OUT_START, onUserSignOut);\n}\nexport function* userSagas() {\n  yield all([call(googleSignInStart), call(emailSignInStart), call(checkUserSession), call(signOutUserStart)]);\n}","map":{"version":3,"sources":["D:\\Projects\\udemy-react-projects\\Crwn-clothing\\crwn-clothing\\src\\redux\\user\\user-sagas.js"],"names":["takeLatest","put","all","call","userTypes","googleProvider","auth","createUserProfileDocument","getCurrentUser","signInFailure","signInSuccess","signOutFailure","getAuthUserSnapshot","user","userRef","snapshot","get","id","data","error","message","onGoogleSignIn","signInWithPopup","onEmailSignIn","payload","email","password","signInWithEmailAndPassword","isUserAuthenticated","userAuth","onUserSignOut","googleSignInStart","GOOGLE_SIGN_IN_START","emailSignInStart","EMAIL_SIGN_IN_START","checkUserSession","CHECK_USER_SESSION","signOutUserStart","SIGN_OUT_START","userSagas"],"mappings":"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","sourcesContent":["import {takeLatest, put, all, call} from 'redux-saga/effects';\r\n\r\nimport userTypes from './user.types';\r\nimport {googleProvider, auth, createUserProfileDocument, getCurrentUser} from '../../firebase/firebase.utils';\r\nimport {signInFailure, signInSuccess, signOutFailure} from './user.actions';\r\n\r\nexport function* getAuthUserSnapshot(user) {\r\n  try {\r\n    const userRef = yield call(createUserProfileDocument, user);\r\n    const snapshot = yield userRef.get();\r\n    yield put(signInSuccess({id: snapshot.id, ...snapshot.data()}))\r\n  } catch(error) {\r\n    yield put(signInFailure(error.message));\r\n  }\r\n}\r\n\r\nexport function* onGoogleSignIn() {\r\n  try {\r\n    const {user} = yield auth.signInWithPopup(googleProvider);\r\n    yield getAuthUserSnapshot(user);\r\n  } catch(error) {\r\n    yield put(signInFailure(error.message));\r\n  }\r\n}\r\n\r\nexport function* onEmailSignIn({payload: {email, password}}) {\r\n  try {\r\n    const {user} = yield auth.signInWithEmailAndPassword(email, password);\r\n    yield getAuthUserSnapshot(user);\r\n  } catch(error) {\r\n    yield put(signInFailure(error.message))\r\n  }\r\n}\r\n\r\nexport function* isUserAuthenticated() {\r\n  try {\r\n    const userAuth = yield getCurrentUser();\r\n    if(!userAuth) return;\r\n    yield getAuthUserSnapshot(userAuth);\r\n  } catch(error) {\r\n    yield put(signInFailure(error.message));\r\n  }\r\n}\r\n\r\nexport function* onUserSignOut() {\r\n  try {\r\n\r\n  }catch(error) {\r\n    yield put(signOutFailure(error.message));\r\n  }\r\n}\r\n\r\nexport function* googleSignInStart() {\r\n  yield takeLatest(userTypes.GOOGLE_SIGN_IN_START, onGoogleSignIn);\r\n}\r\n\r\nexport function* emailSignInStart() {\r\n  yield takeLatest(userTypes.EMAIL_SIGN_IN_START, onEmailSignIn);\r\n}\r\n\r\nexport function* checkUserSession() {\r\n  yield takeLatest(userTypes.CHECK_USER_SESSION, isUserAuthenticated);\r\n}\r\n\r\nexport function* signOutUserStart() {\r\n  yield takeLatest(userTypes.SIGN_OUT_START, onUserSignOut)\r\n}\r\n\r\nexport function* userSagas() {\r\n  yield all([\r\n    call(googleSignInStart),\r\n    call(emailSignInStart),\r\n    call(checkUserSession),\r\n    call(signOutUserStart)\r\n  ])\r\n}\r\n"]},"metadata":{},"sourceType":"module"}