{"ast":null,"code":"import _objectSpread from \"D:\\\\Projects\\\\udemy-react-projects\\\\Crwn-clothing\\\\crwn-clothing\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"D:\\\\Projects\\\\udemy-react-projects\\\\Crwn-clothing\\\\crwn-clothing\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"D:\\\\Projects\\\\udemy-react-projects\\\\Crwn-clothing\\\\crwn-clothing\\\\src\\\\components\\\\sign-up\\\\sign-up.jsx\";\nimport React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport FormInput from '../form-input/form-input';\nimport CustomButton from '../custom-button/custom-button';\nimport { signUpStart } from '../../redux/user/user.actions';\nimport { SignUpContainer, SignUpTitle } from './sign-up.styles';\n\nconst SignUp = ({\n  signUpStart\n}) => {\n  const _useState = useState({\n    displayName: \"\",\n    email: \"\",\n    password: \"\",\n    confirmPassword: \"\"\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        userCredentials = _useState2[0],\n        setUserCredentials = _useState2[1];\n\n  const displayName = userCredentials.displayName,\n        email = userCredentials.email,\n        password = userCredentials.password,\n        confirmPassword = userCredentials.confirmPassword;\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n\n    if (password !== confirmPassword) {\n      alert('Password don`t match');\n      return;\n    }\n\n    signUpStart(email, password, displayName);\n  };\n\n  const handleChange = event => {\n    const _event$target = event.target,\n          value = _event$target.value,\n          name = _event$target.name;\n    setUserCredentials(_objectSpread({}, userCredentials, {\n      [name]: value\n    }));\n  };\n\n  return React.createElement(SignUpContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, React.createElement(SignUpTitle, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, \"I do not have an account\"), React.createElement(\"form\", {\n    className: \"sign-up-form\",\n    onSubmit: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, React.createElement(FormInput, {\n    name: \"displayName\",\n    type: \"text\",\n    value: displayName,\n    handleChange: handleChange,\n    label: \"Display name\",\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }), React.createElement(FormInput, {\n    name: \"email\",\n    type: \"email\",\n    value: email,\n    handleChange: handleChange,\n    label: \"Email\",\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }), React.createElement(FormInput, {\n    name: \"password\",\n    type: \"password\",\n    value: password,\n    handleChange: handleChange,\n    label: \"password\",\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }), React.createElement(FormInput, {\n    name: \"confirmPassword\",\n    type: \"password\",\n    value: confirmPassword,\n    handleChange: handleChange,\n    label: \"Confirm password\",\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }), React.createElement(CustomButton, {\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, \"Sign Up\")));\n};\n\nconst mapDispatchToProps = dispatch => ({\n  signUpStart: (email, password, displayName) => dispatch(signUpStart({\n    email,\n    password,\n    displayName\n  }))\n});\n\nexport default connect(null, mapDispatchToProps)(SignUp);","map":{"version":3,"sources":["D:\\Projects\\udemy-react-projects\\Crwn-clothing\\crwn-clothing\\src\\components\\sign-up\\sign-up.jsx"],"names":["React","useState","connect","FormInput","CustomButton","signUpStart","SignUpContainer","SignUpTitle","SignUp","displayName","email","password","confirmPassword","userCredentials","setUserCredentials","handleSubmit","event","preventDefault","alert","handleChange","target","value","name","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\nimport FormInput from '../form-input/form-input';\r\nimport CustomButton from '../custom-button/custom-button';\r\nimport {signUpStart} from '../../redux/user/user.actions';\r\n\r\nimport {\r\n  SignUpContainer,\r\n  SignUpTitle\r\n} from './sign-up.styles';\r\n\r\nconst SignUp = ({signUpStart}) => {\r\n  const [userCredentials, setUserCredentials] = useState({\r\n    displayName: ``,\r\n    email: ``,\r\n    password: ``,\r\n    confirmPassword: ``\r\n  })\r\n\r\n  const {displayName, email, password, confirmPassword} = userCredentials;\r\n\r\n  const handleSubmit =  async event => {\r\n    event.preventDefault();\r\n\r\n    if(password !== confirmPassword) {\r\n      alert('Password don`t match');\r\n      return;\r\n    }\r\n\r\n    signUpStart(email, password, displayName)\r\n  }\r\n\r\n  const handleChange = event => {\r\n    const {value, name} = event.target;\r\n\r\n    setUserCredentials({\r\n      ...userCredentials,\r\n      [name]: value\r\n    })\r\n  }\r\n\r\n  return (\r\n    <SignUpContainer>\r\n      <SignUpTitle>I do not have an account</SignUpTitle>\r\n      <form className='sign-up-form' onSubmit={handleSubmit}>\r\n      <FormInput\r\n        name='displayName'\r\n        type='text'\r\n        value={displayName}\r\n        handleChange={handleChange}\r\n        label={`Display name`}\r\n        required\r\n      />\r\n      <FormInput\r\n        name='email'\r\n        type='email'\r\n        value={email}\r\n        handleChange={handleChange}\r\n        label={`Email`}\r\n        required\r\n      />\r\n      <FormInput\r\n        name='password'\r\n        type='password'\r\n        value={password}\r\n        handleChange={handleChange}\r\n        label={`password`}\r\n        required\r\n      />\r\n      <FormInput\r\n        name='confirmPassword'\r\n        type='password'\r\n        value={confirmPassword}\r\n        handleChange={handleChange}\r\n        label={`Confirm password`}\r\n        required\r\n      />\r\n      <CustomButton type='submit'>Sign Up</CustomButton>\r\n      </form>\r\n    </SignUpContainer>\r\n  )\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  signUpStart: (email, password, displayName) => dispatch(signUpStart({email, password, displayName}))\r\n})\r\n\r\nexport default connect(null, mapDispatchToProps)(SignUp);\r\n"]},"metadata":{},"sourceType":"module"}